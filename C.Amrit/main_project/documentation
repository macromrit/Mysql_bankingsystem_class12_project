Title: Dopethon
Agenda: to make a bank-like software via python and MySQL
pgm lang: python v.3.9
database: Mysql(community version)
capital medium: $ a.k.a "USD"
Repository stored in Github: True -> name: Mysql_dbc_cs
official email: bankname.avch@gmail.com
db name: banking_system
crew list: ->S.Surya, 
           ->M.Adethya, 
           ->C.R.M.S.Amrit Subramanian
super users: ?


libraries used->
    1)random -> ml tamed model
    2)mysql -> database <-> python integration
    3)pyplot -> graphs and stuffs
    4)smtplib -> to mail users about their transactions 


USP's to choose our bank:->
    
    ->bank balance can be zero... no matter about the span won't get you spammed.. ya account will exist    
    ->ya data would be as confidential as ibm's nxt wokon.. just buy something on us..we are the most secured place to manipulate funds
    ->ya bank history would be pretty explicit and details regarding your transaction would be mailed super spontaneously.


functionalities of the program:
    
    -> super user refferal
    -> Create an account
    -> Delete an account -> should authenticate user
    -> withdraw funds -> should authenticate user
    -> deposit funds -> should authenticate user
    -> transfer funds -> should authenticate user
    -> display balance and history (will have graphs to portray ya transfer history and balance if user requests)
    -> send email to the user with all the infos and transactions he/she had made.


Create an account->
   
    1)name (constarint-> len(name)>=5)
    2)age (constarint-> age>=18)
    3)Nationality
    3)ml model to generate unique user id via random modules.. this dumbo is supposed to be the pk in db we had created
    4)phone_number (constraint -> len(phone_number)=10)
    5)email (constraint -> should have '@' and gmail must be the only way to pave)
    6)date created -> yyyy-mm-dd hr:min:sec.milsec gotta make it varchar in mysql to resemble such complex timing structure.
    %% email should be authenticated by obcuring ottc's to the input aisle via users by mailing them the temporary code


Delete an account->
    
    1)should authenticate the user first
    2)reaffirm whether to delete the account or not
    3)once approved delete the account from the database 


Deposit funds->
   
    1)should authenticate the user first
    2)let the user input the amount he wants to deposit.. constraint:-> (1million >= amount > 5)
    3)4.50bucks should be deducted for the deposition process from the amount inserted.. service charge! 
    4)finally if conditions make the cut... deploy the amount into the account.


withdraw funds->
    
    1)should authenticate the user first
    2)let the user input the amount of funds he wants to withdraw.. constraint:-> (10grand >= amount >=1) and remember (amount <= balance-1)
    3)no funds would be deducted during this process as a service charge!
    4)finally if conditions make the cut... deduce the withdrawn amount from the account.


Transfer funds->

    1)should authenticate the user first
    2)let the user input the receivers user id and username.. then figure whether such user exists 
    3)if user detected.. obcure the amount to be transferred.. constraint:-> (950000 >= amount >= 10) and remember (amount <= balance-1)
    4)9.50bucks should be deducted for the deposition process from the amount inserted.. service charge! 
    4)finally if conditions make the cut... deduce the amount from the sender account and append that amount with a deducted service charge to the receiver's account


Display balance and history:

    1)ask the user whether he or she wants to view a graph captured data regarding their balance 
    2)display the amount available in their account
    3)if required or preferred reflect all the transaction details of the user 


Superusers... Who are they?.. and their exceptions:

    super users: are officials appointed by a firm or management to access and glimpse the data of that firm with legitimate approval in a legal way.

    exceptions:
        1)can view all sub-users history and track their details
        2)and these bunchies are the only people who would get access to glance bank's ethical and confidential info.

Key scripts:
    ->values should be inserted dynamically to avoid fatal sql injections

Table names mysql:
    ->account_holders = has user infos
    ->history has user transaction details
